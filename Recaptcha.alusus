module Recaptcha {
    function initializeBackend() {
        if Srl.System.exec("mkdir -p /tmp/gcaptcha") != 0 {
            Srl.System.fail(1, "Recaptcha: Could not create temp directory.\n");
        }
        def js: String =
            "let recaptchaOnloadResolve;"
            "const recaptchaOnloadPromise = new Promise((resolve) => { recaptchaOnloadResolve = resolve });"
            "function recaptchaOnloadCallback() {"
            "  recaptchaOnloadResolve();"
            "}"
            "function awaitRecaptchaOnloadCallback() {"
            "  return recaptchaOnloadPromise;"
            "}"
            "function renderRecaptcha(arg) {"
            "  const { id, sitekey } = JSON.parse(arg);"
            "  return grecaptcha.render(id, { sitekey });"
            "}"
            "function getRecaptchaResponse(id) {"
            "  return grecaptcha.getResponse(id);"
            "}"
            "function resetRecaptcha(id) {"
            "  return grecaptcha.reset(id);"
            "}";
        if !Srl.Fs.createFile("/tmp/gcaptcha/helpers.js", js.buf, js.getLength()) {
            Srl.System.fail(1, "Recaptcha: Could not create helper JS file.\n");
        }
        WebPlatform.addAssetRoute(Srl.String("/gcaptcha/"), Srl.String("/tmp/gcaptcha/"));
    }

    function initializeFrontend(): Srl.SrdRef[Promises.Promise[Int]] {
        return loadJsScript("/gcaptcha/helpers.js").then[Int](closure (Int, p: ref[Promises.Promise[Int]]) {
            loadJsScript("https://www.google.com/recaptcha/api.js?onload=recaptchaOnloadCallback&render=explicit");
            p.resolve(callCustomAsyncJsFn("awaitRecaptchaOnloadCallback", "").ignoreResult());
        });
    }

    class Captcha {
        @injection def component: WebPlatform.Component;
        def key: Srl.String;
        def captchaId: Srl.String;

        handler this~init(k: Srl.String) {
            this.key = k;
            this.view = Box();
        }

        handler (this:WebPlatform.Component).afterBuild() set_ptr {
            this.captchaId = callCustomJsFn(
                "renderRecaptcha",
                Srl.String.format("{ \"id\": \"%s\", \"sitekey\": \"%s\" }", this.view.id.buf, this.key.buf)
            )~cast[CharsPtr];
        }

        handler this.getResponse(): Srl.String {
            return Srl.String(callCustomJsFn("getRecaptchaResponse", this.captchaId)~cast[CharsPtr]);
        }

        handler this.reset() {
            callCustomJsFn("resetRecaptcha", this.captchaId);
        }

        handler this_type(k: Srl.String): Srl.SrdRef[Captcha] {
            return Srl.SrdRef[Captcha]().{ alloc()~init(k) };
        }
    }

    function verify(key: CharsPtr, token: CharsPtr): Bool {
        def curlHandle: ptr[Srl.Net.Curl] = Srl.Net.CurlEasy.init();

        def content: Srl.Net.ResponseContent;
        content.data = 0
        content.size = 0

        def url: String = String.format("https://www.google.com/recaptcha/api/siteverify?secret=%s&response=%s", key, token);

        Srl.Net.CurlEasy.setOpt(curlHandle, Srl.Net.CurlOpt.URL, url.buf);
        Srl.Net.CurlEasy.setOpt(curlHandle, Srl.Net.CurlOpt.HTTPGET, true);
        Srl.Net.CurlEasy.setOpt(curlHandle, Srl.Net.CurlOpt.HTTPHEADER, false);
        Srl.Net.CurlEasy.setOpt(curlHandle, Srl.Net.CurlOpt.SSL_VERIFYPEER, false);
        Srl.Net.CurlEasy.setOpt(curlHandle, Srl.Net.CurlOpt.FOLLOWLOCATION, true);
        Srl.Net.CurlEasy.setOpt(curlHandle, Srl.Net.CurlOpt.WRITEDATA, content~ptr);
        Srl.Net.CurlEasy.setOpt(curlHandle, Srl.Net.CurlOpt.WRITEFUNCTION, Srl.Net.responseCallback~ptr);
        def resultCode: Int = Srl.Net.CurlEasy.perform(curlHandle);
        if resultCode == Srl.Net.CurlCode.OK {
            def httpStatus: Int[64];
            Srl.Net.CurlEasy.getInfo(curlHandle, Srl.Net.CurlInfo.RESPONSE_CODE, httpStatus~ptr);
            Srl.Net.CurlEasy.cleanup(curlHandle);
            if httpStatus >= 200 and httpStatus < 300 and content.data != 0 {
                def obj: Json = Srl.String(content.data, content.size);
                Memory.free(content.data);
                return obj("success")
            }
        } else {
            Srl.Net.CurlEasy.cleanup(curlHandle);
        }
        if content.data != 0 Srl.Memory.free(content.data);
        return false;
    }
}
